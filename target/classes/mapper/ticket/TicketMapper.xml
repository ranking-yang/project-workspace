<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.webproject.mapper.TicketMapper">

	<select id="getMemberTickets" resultType="TicketDetailDTO">
		
		SELECT 
		    DISTINCT ticket.booking_date, ticket.booking_time, ticket.review_code,
		    count_ticket.booking_total_qty,
		    p.performance_code, p.performance_name, p.poster, p.main_category,
		    payment_code_fk AS payment_code, pay.payment_date, pay.total_price, ticket.advance_ticket_state
		FROM advance_tickets ticket
		INNER JOIN
		(SELECT payment_code_fk, COUNT(payment_code_fk) as booking_total_qty FROM advance_tickets GROUP BY payment_code_fk) count_ticket USING(payment_code_fk)
		INNER JOIN performance p ON ticket.performance_code = p.performance_code
		INNER JOIN payments pay ON payment_code_fk = pay.payment_code
		WHERE ticket.booker_code = #{booker_code} AND advance_ticket_state = 'Y'
		ORDER BY pay.payment_date DESC
		
	</select>
	
	<select id="getMemberTickets_available" resultType="TicketDetailDTO">
	<![CDATA[
		SELECT 
		    DISTINCT ticket.booking_date, ticket.booking_time, ticket.review_code, 
		    count_ticket.booking_total_qty,
		    p.performance_code, p.performance_name, p.poster, p.main_category,
		    payment_code_fk AS payment_code, pay.payment_date, pay.total_price, ticket.advance_ticket_state
		FROM advance_tickets ticket
		INNER JOIN
		(SELECT payment_code_fk, COUNT(payment_code_fk) as booking_total_qty FROM advance_tickets GROUP BY payment_code_fk) count_ticket USING(payment_code_fk)
		INNER JOIN performance p ON ticket.performance_code = p.performance_code
		INNER JOIN payments pay ON payment_code_fk = pay.payment_code
		WHERE ticket.booker_code = #{booker_code} AND advance_ticket_state = 'Y'
		AND ticket.booking_date >= TRUNC(sysdate)
		ORDER BY ticket.booking_date DESC
	]]>
	</select>
	
	<select id="getMemberTickets_done" resultType="TicketDetailDTO">
	<![CDATA[
		SELECT 
		    DISTINCT ticket.booking_date, ticket.booking_time, ticket.review_code,
		    count_ticket.booking_total_qty,
		    p.performance_code, p.performance_name, p.poster, p.main_category,
		    payment_code_fk AS payment_code, pay.payment_date, pay.total_price, ticket.advance_ticket_state
		FROM advance_tickets ticket
		INNER JOIN
		(SELECT payment_code_fk, COUNT(payment_code_fk) as booking_total_qty FROM advance_tickets GROUP BY payment_code_fk) count_ticket USING(payment_code_fk)
		INNER JOIN performance p ON ticket.performance_code = p.performance_code
		INNER JOIN payments pay ON payment_code_fk = pay.payment_code
		WHERE ticket.booker_code = #{booker_code} AND advance_ticket_state = 'Y'
		AND ticket.booking_date < TRUNC(sysdate)
		ORDER BY ticket.booking_date DESC
	]]>
	</select>
	
	<select id="getMemberTickets_old" resultType="TicketDetailDTO">		
		SELECT 
		    DISTINCT ticket.booking_date, ticket.booking_time, ticket.review_code,
		    count_ticket.booking_total_qty,
		    p.performance_code, p.performance_name, p.poster, p.main_category,
		    payment_code_fk AS payment_code, pay.payment_date, pay.total_price, ticket.advance_ticket_state
		FROM advance_tickets ticket
		INNER JOIN
		(SELECT payment_code_fk, COUNT(payment_code_fk) as booking_total_qty FROM advance_tickets GROUP BY payment_code_fk) count_ticket USING(payment_code_fk)
		INNER JOIN performance p ON ticket.performance_code = p.performance_code
		INNER JOIN payments pay ON payment_code_fk = pay.payment_code
		WHERE ticket.booker_code = #{booker_code} AND advance_ticket_state = 'Y'
		ORDER BY ticket.booking_date		
	</select>	
	
	<select id="getTicketDetail" resultType="TicketDetailDTO">
		SELECT 
			DISTINCT
		    t.booking_date,
		    t.booking_time,
		    per.performance_name,
		    per.poster,
		    per.place,
		    per.address,
		    pay.payment_code,
		    pay.payment_date,
		    pay.total_price,
		    pay.payment_way
		FROM advance_tickets t
		INNER JOIN payments pay ON t.payment_code_fk = pay.payment_code
		INNER JOIN performance per ON t.performance_code = per.performance_code
		WHERE payment_code_fk = #{payment_code} AND advance_ticket_state = 'Y'
	</select>
	
	<select id="getTicketDetail_hasCoupon" resultType="TicketDetailDTO">
		SELECT 
		    DISTINCT
		    t.booking_date,
		    t.booking_time,
		    per.performance_name,
		    per.poster,
		    per.place,
		    per.address,
		    pay.payment_code,
		    pay.payment_date,
		    pay.total_price,
		    pay.payment_way,
		    c.coupon_name
		FROM advance_tickets t, payments pay, performance per, member_coupon mc, coupon c
		WHERE
		t.payment_code_fk = pay.payment_code
		AND t.performance_code = per.performance_code
		AND pay.related_coupon = mc.member_coupon_code
		AND mc.coupon_code = c.coupon_code
		AND payment_code_fk = #{payment_code} AND advance_ticket_state = 'Y'
	</select>
	
	<select id="getTicketOptionQty" resultType="TicketOptionQtyDTO">
		SELECT booking_type, COUNT(booking_type) AS booking_qty
		FROM (
			SELECT * 
			FROM advance_tickets t
			INNER JOIN payments p ON t.payment_code_fk = p.payment_code
			INNER JOIN performance per ON t.performance_code = per.performance_code
			WHERE payment_code_fk = #{payment_code}
			) 
		GROUP BY booking_type
	</select>
	
	<select id="getTicketNum" resultType="TicketOptionDTO">
		SELECT advance_ticket_code, booking_type
		FROM advance_tickets
		WHERE payment_code_fk = #{payment_code}
	</select>
	
	<update id="updateRefundTicketState">
		UPDATE advance_tickets 
		SET advance_tickets.advance_ticket_state = 'N' 
		WHERE payment_code_fk = #{payment_code}
	</update>
	
	<select id="getRefundTickets" resultType="TicketRefundDTO">
		SELECT 
	   		DISTINCT
		    ticket.booking_date, ticket.booking_time, count_ticket.booking_total_qty,
		    p.performance_name, p.poster, p.main_category, p.performance_code,
		    r.refund_code, r.refund_date, r.refund_status,
		    pay.payment_code, pay.total_price
		FROM advance_tickets ticket
			INNER JOIN
			(SELECT payment_code_fk, COUNT(payment_code_fk) as booking_total_qty FROM advance_tickets GROUP BY payment_code_fk) count_ticket USING(payment_code_fk)
			INNER JOIN performance p ON ticket.performance_code = p.performance_code
			INNER JOIN payments pay ON payment_code_fk = pay.payment_code
			INNER JOIN refund r ON payment_code_fk = r.payment_code
		WHERE ticket.booker_code = #{booker_code} AND advance_ticket_state = 'N'
		ORDER BY r.refund_date DESC
	</select>
	
	<select id="getRefundTicketDetail" resultType="TicketRefundDTO">
		SELECT 
        DISTINCT
	        t.booking_date,
	        t.booking_time,
	        per.performance_name,
	        per.poster,
	        per.place,
	        r.refund_code,
	        r.refund_date,
	        r.refund_status,
	        pay.payment_code,
	        pay.payment_date,
	        pay.total_price,
	        pay.payment_way
		FROM advance_tickets t
		INNER JOIN payments pay ON t.payment_code_fk = pay.payment_code
		INNER JOIN refund r ON t.payment_code_fk = r.payment_code
		INNER JOIN performance per ON t.performance_code = per.performance_code
		WHERE payment_code_fk = #{payment_code} AND advance_ticket_state = 'N'
	</select>
	
	<select id="getRefundTicketDetail_hasCoupon" resultType="TicketRefundDTO">
			SELECT 
			    DISTINCT
			        t.booking_date,
			        t.booking_time,
			        per.performance_name,
			        per.poster,
			        per.place,
			        r.refund_code,
			        r.refund_date,
			        r.refund_status,
			        pay.payment_code,
			        pay.payment_date,
			        pay.total_price,
			        pay.payment_way,
			        c.coupon_name
		    FROM advance_tickets t, payments pay, refund r, performance per, member_coupon mc, coupon c
		    WHERE
		    t.payment_code_fk = pay.payment_code
		    AND t.payment_code_fk = r.payment_code
		    AND t.performance_code = per.performance_code
		    AND pay.related_coupon = mc.member_coupon_code
		    AND mc.coupon_code = c.coupon_code
		    AND payment_code_fk = #{payment_code} AND advance_ticket_state = 'N'
	</select>
	
	<update id="updateReviewCode">
		UPDATE advance_tickets SET review_code = #{review_code} WHERE payment_code_fk = #{payment_code}
	</update>
	
	<update id="deleteReviewCode">
		UPDATE advance_tickets SET review_code = NULL WHERE review_code = #{review_code}
	</update>

</mapper>